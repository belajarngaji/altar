<script type="module">
import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js/+esm';

const SUPABASE_URL = "https://jpxtbdawajjyrvqrgijd.supabase.co";
const SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpweHRiZGF3YWpqeXJ2cXJnaWpkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYzMTI4OTgsImV4cCI6MjA3MTg4ODg5OH0.vEqCzHYBByFZEXeLIBqx6b40x6-tjSYa3Il_b2mI9NE"; 
const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);

const quizNameMap = { 'kelas01_bab01_hijaiyah': 'Kelas 1 Bab 1 Hijaiyah' };

// Sidebar
const sidebar = document.getElementById('sidebar');
const overlay = document.getElementById('overlay');
document.getElementById('sidebar-toggle').addEventListener('click', ()=>{
  sidebar.classList.toggle('-translate-x-full');
  overlay.style.display = sidebar.classList.contains('-translate-x-full')?'none':'block';
});
overlay.addEventListener('click', ()=>{
  sidebar.classList.add('-translate-x-full');
  overlay.style.display = 'none';
});

// Chart helper
function createChart(ctx,type,labels,data,colors,label){
  return new Chart(ctx,{
    type,
    data:{labels,datasets:[{label,data,backgroundColor:colors,fill:type==='line'?false:true}]},
    options:{
      responsive:true,
      maintainAspectRatio:true,
      plugins:{legend:{position:'bottom'},title:{display:!!label,text:label}},
      scales:{y:{beginAtZero:true}}
    }
  });
}

// Main function
document.addEventListener('DOMContentLoaded', async () => {
  // ===== Pengecekan login & role admin =====
  const { data: { user } } = await supabase.auth.getUser();
  if (!user) {
    window.location.href = '/admin-login/';
    return;
  }

  const { data: profile } = await supabase
    .from('profiles')
    .select('role')
    .eq('id', user.id)
    .single();

  if (!profile || (profile.role !== 'admin' && profile.role !== 'superadmin')) {
    alert('Anda tidak memiliki akses ke dashboard ini.');
    window.location.href = '/';
    return;
  }

  const isSuperAdmin = profile.role === 'superadmin';

  // ===== Fetch semua data dashboard =====
  // Tambahkan filter admin_id untuk user biasa
  const profileFilter = isSuperAdmin ? {} : { admin_id: user.id };

  const [
    totalUsers,
    quizToday,
    leaderboardData,
    popularQuizData,
    recentActivities,
    allAttempts
  ] = await Promise.all([
    supabase.from('profiles').select('*', { count:'exact', head:true }).match(profileFilter).then(r => r.count || 0),
    (() => {
      const t = new Date(); t.setHours(0,0,0,0);
      return supabase.from('quiz_attempts').select('*', { count:'exact', head:true })
        .gte('submitted_at', t.toISOString())
        .then(r => r.count || 0);
    })(),
    supabase.from('leaderboard').select('rank, username, total_score')
      .match(profileFilter)
      .limit(10).order('total_score', { ascending:false })
      .then(r => r.data || []),
    supabase.from('quiz_attempts').select('quiz_id, user_id').then(r => {
      const data = r.data || [];
      // filter data untuk admin biasa
      const filteredData = isSuperAdmin ? data : data.filter(a => a.user_id === user.id || a.admin_id === user.id);
      const counts = {};
      filteredData.forEach(a => {
        const name = quizNameMap[a.quiz_id] || a.quiz_id;
        counts[name] = (counts[name] || 0) + 1;
      });
      const sorted = Object.entries(counts).sort(([,a],[,b]) => b - a).slice(0,5);
      return { labels: sorted.map(x => x[0]), data: sorted.map(x => x[1]) };
    }),
    supabase.from('latest_activity').select('*').order('submitted_at', { ascending:false }).then(r => {
      const data = r.data || [];
      return isSuperAdmin ? data : data.filter(a => a.admin_id === user.id);
    }),
    supabase.from('quiz_attempts').select('*').then(r => {
      const data = r.data || [];
      return isSuperAdmin ? data : data.filter(a => a.admin_id === user.id);
    })
  ]);

  // ===== Update KPI =====
  document.getElementById('total-users').textContent = totalUsers;
  document.getElementById('quiz-attempts-today').textContent = quizToday;

  // ===== Leaderboard =====
  const lb = document.getElementById('leaderboard-body');
  lb.innerHTML = leaderboardData.length > 0 ?
    leaderboardData.map(u => `<tr class="border-b border-gray-200 hover:bg-gray-50">
      <td class="py-3 px-6 font-medium">${u.rank}</td>
      <td class="py-3 px-6">${u.username}</td>
      <td class="py-3 px-6 font-bold text-yellow-500">${u.total_score||0}</td>
    </tr>`).join('') :
    `<tr><td colspan="3" class="py-4 px-6 text-center text-gray-400">Belum ada data skor.</td></tr>`;

  // ===== Recent Activity =====
  const tbody = document.getElementById('recent-activity-body');
  tbody.innerHTML = recentActivities.length > 0 ?
    recentActivities.map(a => `<tr class="${a.is_correct?'correct':'wrong'} border-b border-gray-200 hover:bg-gray-50">
      <td class="py-4 px-6">${a.username||'Tanpa Nama'}</td>
      <td class="py-4 px-6">${quizNameMap[a.quiz_id]||a.quiz_id}</td>
      <td class="py-4 px-6 font-medium">${a.score}</td>
      <td class="py-4 px-6 text-sm text-gray-500">${new Date(a.submitted_at).toLocaleString('id-ID')}</td>
    </tr>`).join('') :
    `<tr><td colspan="4" class="py-4 px-6 text-center text-gray-400">Belum ada aktivitas.</td></tr>`;

  // Kuis Terpopuler
  createChart(document.getElementById('popular-quizzes-chart').getContext('2d'),'doughnut',popularQuizData.labels,popularQuizData.data,['#3b82f6','#60a5fa','#93c5fd','#bfdbfe','#e0f2fe'],'Pengerjaan');

  // Tren Skor / Week
  const weeks = {};
  allAttempts.forEach(a => {
    const d = new Date(a.submitted_at);
    const year = d.getFullYear();
    const week = Math.ceil((((d - new Date(year, 0, 1)) / 86400000) + 1) / 7);
    const key = `${year}-W${week}`;
    if (!weeks[key]) weeks[key] = [];
    weeks[key].push(a.score);
  });
  const weekLabels = Object.keys(weeks).sort();
  const weekAvgScores = weekLabels.map(w => {
    const arr = weeks[w];
    return arr.reduce((s, v) => s + v, 0) / arr.length;
  });
  createChart(document.getElementById('lineChartWeek').getContext('2d'), 'line', weekLabels, weekAvgScores, ['#3b82f6'], 'Rata-rata Skor / Week');

  // Persentase Jawaban per Quiz
  const quizMap = {};
  allAttempts.forEach(a => {
    if (!quizMap[a.quiz_id]) quizMap[a.quiz_id] = [0, 0]; // [benar, salah]
    quizMap[a.quiz_id][0] += Number(a.score) || 0;
    quizMap[a.quiz_id][1] += (Number(a.total_questions) || 0) - (Number(a.score) || 0);
  });
  const quizLabels = Object.keys(quizMap).map(q => quizNameMap[q] || q);
  const quizCorrect = Object.values(quizMap).map(v => v[0]);
  createChart(document.getElementById('barChartAnswer').getContext('2d'), 'bar', quizLabels, quizCorrect, ['#3b82f6','#60a5fa','#93c5fd','#2563eb','#1e40af'], 'Persentase Jawaban Benar per Quiz');

  // Benar vs Salah Keseluruhan
  const totalCorrect = allAttempts.reduce((s, a) => s + Number(a.score || 0), 0);
  const totalQuestions = allAttempts.reduce((s, a) => s + Number(a.total_questions || 0), 0);
  createChart(document.getElementById('pieChartTotal').getContext('2d'), 'pie', ['Benar','Salah'], [totalCorrect, Math.max(totalQuestions - totalCorrect, 0)], ['#4CAF50','#F44336'], 'Benar vs Salah Keseluruhan');

  // Benar vs Salah Harian
  const today = new Date(); today.setHours(0,0,0,0);
  const dailyAttempts = allAttempts.filter(a => new Date(a.submitted_at) >= today);
  const dailyCorrect = dailyAttempts.reduce((s, a) => s + Number(a.score || 0), 0);
  const dailyQuestions = dailyAttempts.reduce((s, a) => s + Number(a.total_questions || 0), 0);
  createChart(document.getElementById('pieChartDaily').getContext('2d'), 'pie', ['Benar','Salah'], [dailyCorrect, Math.max(dailyQuestions - dailyCorrect, 0)], ['#4CAF50','#F44336'], 'Benar vs Salah Hari Ini');
});
</script>